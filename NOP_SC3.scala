import io.gatling.core.Predef._
import io.gatling.http.Predef._
import scala.concurrent.duration._

class NOP_SC3 extends Simulation {
  val concurrency = Integer.getInteger("concurrency", 1).toInt
  val rampUpTime = Integer.getInteger("ramp-up", 0).toInt
  val holdForTime = Integer.getInteger("hold-for", 30).toInt
  val throughput = Integer.getInteger("throughput")
  val iterationLimit = Integer.getInteger("iterations")

  val httpConf = http
    .baseURL("http://demo.bzm-presales.com/nopCommerce")

  val durationLimit = rampUpTime + holdForTime
  val scn = scenario("Cart").forever() {
    exec(http("home")
      .get("/"))
    .exec(http("search")
      .get("/search?q=apple")
      .check(status.is(200))
      )
    .exec(http("select laptop")
      .get("/apple-macbook-pro-13-inch")
      .check(status.is(200))
      )
    .exec(http("add laptop to cart")
      .post("/addproducttocart/details/4/1")
      .formParam("addtocart_4.EnteredQuantity",2))
    .exec(http("book category")
      .get("/books")
      .check(status.is(200))
      )
    .exec(http("add book to cart")
      .post("/addproducttocart/details/37/1")
      .formParam("addtocart_37.EnteredQuantity",1))
    .exec(http("accessories category")
      .get("/accessories")
      .check(status.is(200))
      )
    .exec(http("add sunglasses to cart")
      .post("/addproducttocart/details/33/1")
      .formParam("addtocart334.EnteredQuantity",1))
    .exec(http("get cart")
      .get("/cart")
      .check(regex("RequestVerificationToken\" type=\"hidden\" value=\"(.+?)\"").find.saveAs("token")))
    .exec(http("populate cart")
      .post("/cart")
      .formParam("termsoffservice","on")
      .formParam("__RequestVerificationToken","${token}")
      .formParam("itemquantity395545",1)
      .formParam("checkout","checkout")
      .formParam("itemquantity395544",2)
      .formParam("itemquantity395546",1)
      .check(status.is(200))
      )
    .exec(http("checkout step 1")
      .get("/login/checkoutasguest")
      .formParam("returnURL","/nopCommerce/cart")
      .check(status.is(200)))
    .exec(http("checkout step 2")
      .get("/checkout")
      .check(status.is(200))
      )
    .exec(http("country")
      .get("/country/getstatesbycountryid")
      .formParam("addSelectStateItem",true)
      .formParam("countryId",1)
      // .formParam(_,1540314456391)
      )
    .exec(http("billingaddress")
      .post("/checkout/billingaddress")
      .formParam("NewAddress.Email","felicia.chen@blazemeter.com")
      .formParam("NewAddress.City","pirate cove")
      .formParam("NewAddress.Id",0)
      .formParam("NewAddress.LastName","herp-a-derp")
      .formParam("NewAddress.StateProvinceId",9)
      .formParam("nextstep","Next")
      .formParam("NewAddress.Address1","123 tall ship st")
      .formParam("ShipToSameAddress",true)
      .formParam("NewAddress.PhoneNumber",1234567)
      .formParam("NewAddress.ZipPostalCode",95050)
      .formParam("NewAddress.FirstName","captain")
      .formParam("NewAddress.CountryId",1))
    .exec(http("shippingmethod")
      .post("/checkout/shippingmethod")
      .formParam("shippingoption","Ground___Shipping.FixedOrByWeight")
      .formParam("nextstep","Next"))
    .exec(http("paymentmethod")
      .post("/checkout/paymentmethod")
      .formParam("paymentmethod","Payments.CheckMoneyOrder")
      .formParam("nextstep","Next"))
    .exec(http("paymentinfo")
      .post("/checkout/paymentinfo")
      .formParam("nextstep","Next"))
    .exec(http("confirm")
      .post("/checkout/confirm")
      .formParam("nextstep","Next"))
    .exec(http("completed")
      .get("/checkout/completed/21886"))
    .exec(http("back home")
      .get("/"))
    }

  val execution = scn
    .inject(rampUsers(concurrency) over rampUpTime)
    .protocols(httpConf)

  setUp(execution).maxDuration(rampUpTime + holdForTime)
  }